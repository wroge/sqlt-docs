<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>First on {{ sqlt }}</title><link>https://wroge.github.io/sqlt-docs/executors/first/</link><description>Recent content in First on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://wroge.github.io/sqlt-docs/executors/first/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Create statements</title><link>https://wroge.github.io/sqlt-docs/tour/1_create_statements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/1_create_statements/</guid><description>tour/create_statements/repository.go package repository import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; _ &amp;#34;modernc.org/sqlite&amp;#34; ) type Book struct { ID int64 Title string } var ( schema = sqlt.Exec[any](sqlt.Parse(` CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL ) `)) create = sqlt.First[string, int64](sqlt.Parse(` INSERT INTO books (title) VALUES ({{ . }}) RETURNING id; `)) get = sqlt.First[int64, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ .</description></item><item><title>ScanInt</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-int/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-int/</guid><description> {{ ScanInt Field }}
Example type Book struct { ID int Pages *int64 Edition sql.Null[int64] } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , pages {{ ScanInt &amp;#34;Pages&amp;#34; }} , edition {{ Scan &amp;#34;Edition&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>2. Load from file</title><link>https://wroge.github.io/sqlt-docs/tour/2_load_from_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/2_load_from_file/</guid><description>tour/load_from_file/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL ) {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title) VALUES ({{ . }}) RETURNING id; {{ end }} {{ define &amp;#34;get_book&amp;#34; }} SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ . }}; {{ end }} tour/load_from_file/repository.go package repository import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;github.</description></item><item><title>Config</title><link>https://wroge.github.io/sqlt-docs/documentation/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/config/</guid><description> Example import &amp;#34;github.com/Masterminds/sprig/v3&amp;#34; // sqlt.Config implements sqlt.Option config := sqlt.Config{ Placeholder: sqlt.Dollar, Templates: []sqlt.Template{ sqlt.Funcs(sprig.TxtFuncMap()), }, Log: func(ctx context.Context, info sqlt.Info) { fmt.Println(info.SQL) }, } // sqlt.First(opts ...sqlt.Option) var queryBook = sqlt.First[Query, Book](config, sqlt.NoExpirationCache(100), sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>ScanUint</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-uint/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-uint/</guid><description> {{ ScanUint Field }}
Example type Book struct { ID uint Pages *uint64 Edition sql.Null[uint64] } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanUint &amp;#34;ID&amp;#34; }} , pages {{ ScanUint &amp;#34;Pages&amp;#34; }} , edition {{ Scan &amp;#34;Edition&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>3. Bulk insert</title><link>https://wroge.github.io/sqlt-docs/tour/3_bulk_insert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/3_bulk_insert/</guid><description>tour/bulk_insert/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT NOT NULL ) {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title, author) VALUES ({{ .Title }}, {{ .Author }}) RETURNING id; {{ end }} {{ define &amp;#34;insert_books&amp;#34; }} INSERT INTO books (title, author) VALUES {{ range $i, $c := . }} {{ if $i }}, {{ end }} ({{ $c.</description></item><item><title>ScanBool</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-bool/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-bool/</guid><description> {{ ScanBool Field }}
Example type Favorite bool type Book struct { Favorite Favorite Read bool } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT true {{ ScanBool &amp;#34;Favorite&amp;#34; }} , read {{ ScanBool &amp;#34;Read&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>4. Transactions</title><link>https://wroge.github.io/sqlt-docs/tour/4_transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/4_transactions/</guid><description>Alternatively, you can always create a *sql.Tx yourself and use it with each statement.
tour/transactions/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER REFERENCES authors(id), added_at DATE NOT NULL ); CREATE TABLE IF NOT EXISTS authors ( id INTEGER PRIMARY KEY, name TEXT UNIQUE ); {{ end }} {{ define &amp;#34;upsert_author&amp;#34; }} INSERT INTO authors (name) VALUES ({{ .</description></item><item><title>ScanBinary</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-binary/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-binary/</guid><description> {{ ScanBinary Field }}
Example type Book struct { ID int64 AmazonLink url.URL } var queryBook = sqlt.First[string, Book](sqlt.Parse(` SELECT books.id {{ Scan &amp;#34;ID&amp;#34; }} , books.amazon_link {{ ScanBinary &amp;#34;AmazonLink&amp;#34; }} FROM books WHERE title = {{ . }} `))</description></item><item><title>ScanText</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-text/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-text/</guid><description> {{ ScanText Field }}
Example type Book struct { ID int64 Sales big.Int } var queryBook = sqlt.First[string, Book](sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , sales {{ ScanText &amp;#34;Sales&amp;#34; }} FROM books WHERE title = {{ . }} `))</description></item><item><title>ScanStringSlice</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-string-slice/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-string-slice/</guid><description> {{ ScanStringSlice Field Sep }}
Example var queryTags = sqlt.First[any, []string](sqlt.Parse(` SELECT &amp;#39;hello,world&amp;#39;; {{ ScanStringSlice &amp;#34;&amp;#34; &amp;#34;,&amp;#34; }} `))</description></item><item><title>jackc/pgx</title><link>https://wroge.github.io/sqlt-docs/documentation/driver/jackc-pgx/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/driver/jackc-pgx/</guid><description>Example import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/jackc/pgx/v5/stdlib&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Dollar, sqlt.NoExpirationCache(100), sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.Open(&amp;#34;pgx&amp;#34;, &amp;#34;user=postgres password=secret host=localhost port=5432 database=pgx_test sslmode=disable&amp;#34;) if err != nil { return err } book, err := queryBook.</description></item><item><title>mattn/go-sqlite3</title><link>https://wroge.github.io/sqlt-docs/documentation/driver/mattn-go-sqlite3/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/driver/mattn-go-sqlite3/</guid><description>go-sqlite3 is cgo package. If you want to build your app using go-sqlite3, you need gcc.
Example import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/mattn/go-sqlite3&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.</description></item></channel></rss>