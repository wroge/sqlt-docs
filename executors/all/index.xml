<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>All on {{ sqlt }}</title><link>https://wroge.github.io/sqlt-docs/executors/all/</link><description>Recent content in All on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://wroge.github.io/sqlt-docs/executors/all/index.xml" rel="self" type="application/rss+xml"/><item><title>ScanFloat</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-float/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-float/</guid><description> {{ ScanUint Field }}
Example type Book struct { ID uint64 Rating float64 } var queryBook = sqlt.All[any, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , rating {{ ScanFloat &amp;#34;Rating&amp;#34; }} FROM books; `))</description></item><item><title>3. Bulk insert</title><link>https://wroge.github.io/sqlt-docs/tour/3_bulk_insert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/3_bulk_insert/</guid><description>tour/bulk_insert/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT NOT NULL ) {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title, author) VALUES ({{ .Title }}, {{ .Author }}) RETURNING id; {{ end }} {{ define &amp;#34;insert_books&amp;#34; }} INSERT INTO books (title, author) VALUES {{ range $i, $c := . }} {{ if $i }}, {{ end }} ({{ $c.</description></item><item><title>4. Transactions</title><link>https://wroge.github.io/sqlt-docs/tour/4_transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/4_transactions/</guid><description>Alternatively, you can always create a *sql.Tx yourself and use it with each statement.
tour/transactions/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER REFERENCES authors(id), added_at DATE NOT NULL ); CREATE TABLE IF NOT EXISTS authors ( id INTEGER PRIMARY KEY, name TEXT UNIQUE ); {{ end }} {{ define &amp;#34;upsert_author&amp;#34; }} INSERT INTO authors (name) VALUES ({{ .</description></item><item><title>ScanTime</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-time/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-time/</guid><description> {{ ScanTime Field }}
Example type Book struct { Added time.Time Updated *time.Time Published sql.Null[time.Time] } var queryBooks = sqlt.All[string, Book](sqlt.Parse(` SELECT added_at {{ ScanTime &amp;#34;Added&amp;#34; }} , updated_at {{ ScanTime &amp;#34;Updated&amp;#34; }} , published_at {{ Scan &amp;#34;Published&amp;#34; }} FROM books WHERE author = {{ . }} `))</description></item><item><title>5. Complex Query</title><link>https://wroge.github.io/sqlt-docs/tour/5_complex_query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/5_complex_query/</guid><description>tour/complex_query/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, added_at DATE NOT NULL ); CREATE TABLE IF NOT EXISTS authors ( id INTEGER PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS book_authors ( book_id INTEGER REFERENCES books(id), author_id INTEGER REFERENCES authors(id), PRIMARY KEY (book_id, author_id) ); {{ end }} {{ define &amp;#34;upsert_authors&amp;#34; }} INSERT INTO authors (name) VALUES {{ range $i, $a := .</description></item></channel></rss>