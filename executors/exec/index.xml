<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Exec on {{ sqlt }}</title><link>https://wroge.github.io/sqlt-docs/executors/exec/</link><description>Recent content in Exec on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><atom:link href="https://wroge.github.io/sqlt-docs/executors/exec/index.xml" rel="self" type="application/rss+xml"/><item><title>1. Create Statements</title><link>https://wroge.github.io/sqlt-docs/tour/1_create_statements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/1_create_statements/</guid><description>tour/create_statements/repository.go package repository import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; _ &amp;#34;modernc.org/sqlite&amp;#34; ) type Book struct { ID int64 Title string } var ( schema = sqlt.Exec[any](sqlt.Parse(` CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL ) `)) create = sqlt.First[string, int64](sqlt.Parse(` INSERT INTO books (title) VALUES ({{ . }}) RETURNING id; `)) get = sqlt.First[int64, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ .</description></item><item><title>2. Load from File</title><link>https://wroge.github.io/sqlt-docs/tour/2_load_from_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/2_load_from_file/</guid><description>tour/load_from_file/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL ) {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title) VALUES ({{ . }}) RETURNING id; {{ end }} {{ define &amp;#34;get_book&amp;#34; }} SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ . }}; {{ end }} tour/load_from_file/repository.go package repository import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;github.</description></item><item><title>3. Bulk Insert</title><link>https://wroge.github.io/sqlt-docs/tour/3_bulk_insert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/3_bulk_insert/</guid><description>tour/bulk_insert/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT NOT NULL ) {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title, author) VALUES ({{ .Title }}, {{ .Author }}) RETURNING id; {{ end }} {{ define &amp;#34;insert_books&amp;#34; }} INSERT INTO books (title, author) VALUES {{ range $i, $c := . }} {{ if $i }}, {{ end }} ({{ $c.</description></item><item><title>4. Transactions</title><link>https://wroge.github.io/sqlt-docs/tour/4_transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/4_transactions/</guid><description>tour/transactions/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER REFERENCES authors(id), added_at DATE NOT NULL ); CREATE TABLE IF NOT EXISTS authors ( id INTEGER PRIMARY KEY, name TEXT UNIQUE ); {{ end }} {{ define &amp;#34;upsert_author&amp;#34; }} INSERT INTO authors (name) VALUES ({{ .Author }}) ON CONFLICT (name) DO UPDATE SET id = authors.id RETURNING id; {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title, author_id, added_at) VALUES ({{ .</description></item><item><title>5. Complex Query</title><link>https://wroge.github.io/sqlt-docs/tour/5_complex_query/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/5_complex_query/</guid><description>tour/complex_query/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, added_at DATE NOT NULL ); CREATE TABLE IF NOT EXISTS authors ( id INTEGER PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS book_authors ( book_id INTEGER REFERENCES books(id), author_id INTEGER REFERENCES authors(id), PRIMARY KEY (book_id, author_id) ); {{ end }} {{ define &amp;#34;upsert_authors&amp;#34; }} INSERT INTO authors (name) VALUES {{ range $i, $a := .</description></item></channel></rss>