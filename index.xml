<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sqlt on {{ sqlt }}</title><link>/</link><description>Recent content in sqlt on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Scan</title><link>/docs/scanner/scan/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan/</guid><description> {{ Scan Field }}
type Book struct { ID int64 Title string Author string CoAuthor *string Published *time.Time Pages sql.Null[int64] } var queryBook = sqlt.One[int64, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} , author {{ Scan &amp;#34;Author&amp;#34; }} , co_author {{ Scan &amp;#34;CoAuthor&amp;#34; }} , published {{ Scan &amp;#34;Published&amp;#34; }} , pages {{ Scan &amp;#34;Pages&amp;#34; }} FROM books WHERE id = {{ . }} `))</description></item><item><title>ScanString</title><link>/docs/scanner/scan-string/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-string/</guid><description> {{ ScanString Field }}
type Book struct { Author string CoAuthor *string Title sql.Null[string] } var queryBook = sqlt.One[int64, Book](sqlt.Parse(` SELECT author {{ ScanString &amp;#34;Author&amp;#34; }} , co_author {{ ScanString &amp;#34;CoAuthor&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ . }} `))</description></item><item><title>ScanInt64</title><link>/docs/scanner/scan-int64/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-int64/</guid><description> {{ ScanInt64 Field }}
type Book struct { ID int64 Pages *int64 Edition sql.Null[int64] } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , pages {{ ScanInt64 &amp;#34;Pages&amp;#34; }} , edition {{ Scan &amp;#34;Edition&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>ScanUint64</title><link>/docs/scanner/scan-uint64/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-uint64/</guid><description> {{ ScanUint64 Field }}
type Book struct { ID uint64 Pages *uint64 Edition sql.Null[uint64] } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanUint64 &amp;#34;ID&amp;#34; }} , pages {{ ScanUint64 &amp;#34;Pages&amp;#34; }} , edition {{ Scan &amp;#34;Edition&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>ScanBool</title><link>/docs/scanner/scan-bool/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-bool/</guid><description> {{ ScanBool Field }}
type Favorite bool type Book struct { Favorite Favorite Read bool } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT true {{ ScanBool &amp;#34;Favorite&amp;#34; }} , read {{ ScanBool &amp;#34;Read&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>ScanTime</title><link>/docs/scanner/scan-time/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-time/</guid><description> {{ ScanTime Field }}
type Book struct { Added time.Time Updated *time.Time Published sql.Null[time.Time] } var queryBooks = sqlt.All[string, Book](sqlt.Parse(` SELECT added_at {{ ScanTime &amp;#34;Added&amp;#34; }} , updated_at {{ ScanTime &amp;#34;Updated&amp;#34; }} , published_at {{ Scan &amp;#34;Published&amp;#34; }} FROM books WHERE author = {{ . }} `))</description></item><item><title>ScanJSON</title><link>/docs/scanner/scan-json/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-json/</guid><description> {{ ScanJSON Field }}
type Book struct { ID int64 Authors []string } var queryBook = sqlt.First[string, Book](sqlt.Parse(` SELECT books.id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , JSON_AGG(authors.name) {{ ScanJSON &amp;#34;Authors&amp;#34; }} FROM books LEFT JOIN book_authors ON books.id = book_authors.book_id LEFT JOIN authors ON authors.id = book_authors.author_id WHERE books.title = {{ . }} `))</description></item><item><title>ScanBinary</title><link>/docs/scanner/scan-binary/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-binary/</guid><description> {{ ScanBinary Field }}
type Book struct { ID int64 AmazonLink url.URL } var queryBook = sqlt.First[string, Book](sqlt.Parse(` SELECT books.id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , books.amazon_link {{ ScanBinary &amp;#34;AmazonLink&amp;#34; }} FROM books WHERE title = {{ . }} `))</description></item><item><title>ScanText</title><link>/docs/scanner/scan-text/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-text/</guid><description> {{ ScanText Field }}
type Book struct { ID int64 Sales big.Int } var queryBook = sqlt.First[string, Book](sqlt.Parse(` SELECT id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , sales {{ ScanText &amp;#34;Sales&amp;#34; }} FROM books WHERE title = {{ . }} `))</description></item><item><title>jackc/pgx</title><link>/docs/driver/jackc-pgx/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/driver/jackc-pgx/</guid><description>import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/jackc/pgx/v5/stdlib&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Dollar, sqlt.Parse(` SELECT id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.Open(&amp;#34;pgx&amp;#34;, &amp;#34;user=postgres password=secret host=localhost port=5432 database=pgx_test sslmode=disable&amp;#34;) if err != nil { return err } book, err := queryBook.</description></item><item><title>mattn/go-sqlite3</title><link>/docs/driver/mattn-go-sqlite3/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/driver/mattn-go-sqlite3/</guid><description>go-sqlite3 is cgo package. If you want to build your app using go-sqlite3, you need gcc.
import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/mattn/go-sqlite3&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.</description></item><item><title>modernc.org/sqlite</title><link>/docs/driver/modernc-sqlite/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/driver/modernc-sqlite/</guid><description>import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;modernc.org/sqlite&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.Open(&amp;#34;sqlite&amp;#34;, &amp;#34;test.db?_pragma=foreign_keys(1)&amp;#34;) if err != nil { panic(err) } book, err := queryBook.Exec(ctx, db, Query{Title: &amp;#34;Moby-Dick&amp;#34;}) if err !</description></item><item><title>ScanStringSlice</title><link>/docs/scanner/scan-string-slice/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-string-slice/</guid><description> {{ ScanStringSlice Field Sep }}
var queryTags = sqlt.All[any, []string](sqlt.Parse(` SELECT &amp;#39;hello,world&amp;#39;; {{ ScanStringSlice &amp;#34;&amp;#34; &amp;#34;,&amp;#34; }} `))</description></item><item><title>ScanStringTime</title><link>/docs/scanner/scan-string-time/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>/docs/scanner/scan-string-time/</guid><description>{{ ScanStringTime Field Layout Location }}
var queryDate = sqlt.All[string, time.Time](sqlt.Parse(` SELECT &amp;#39;2025-04-06&amp;#39; {{ ScanStringTime &amp;#34;&amp;#34; &amp;#34;DateOnly&amp;#34; &amp;#34;UTC&amp;#34; }} FROM books WHERE title = {{ . }} `)) // Predefined layouts: var layoutMap = map[string]string{ &amp;#34;DateTime&amp;#34;: time.DateTime, &amp;#34;DateOnly&amp;#34;: time.DateOnly, &amp;#34;TimeOnly&amp;#34;: time.TimeOnly, &amp;#34;RFC3339&amp;#34;: time.RFC3339, &amp;#34;RFC3339Nano&amp;#34;: time.RFC3339Nano, &amp;#34;Layout&amp;#34;: time.Layout, &amp;#34;ANSIC&amp;#34;: time.ANSIC, &amp;#34;UnixDate&amp;#34;: time.UnixDate, &amp;#34;RubyDate&amp;#34;: time.RubyDate, &amp;#34;RFC822&amp;#34;: time.RFC822, &amp;#34;RFC822Z&amp;#34;: time.RFC822Z, &amp;#34;RFC850&amp;#34;: time.RFC850, &amp;#34;RFC1123&amp;#34;: time.RFC1123, &amp;#34;RFC1123Z&amp;#34;: time.RFC1123Z, &amp;#34;Kitchen&amp;#34;: time.Kitchen, &amp;#34;Stamp&amp;#34;: time.Stamp, &amp;#34;StampMilli&amp;#34;: time.StampMilli, &amp;#34;StampMicro&amp;#34;: time.</description></item></channel></rss>