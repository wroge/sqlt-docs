<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ScanString on {{ sqlt }}</title><link>https://wroge.github.io/sqlt-docs/scanners/scanstring/</link><description>Recent content in ScanString on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://wroge.github.io/sqlt-docs/scanners/scanstring/index.xml" rel="self" type="application/rss+xml"/><item><title>ScanString</title><link>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-string/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/scanner/scan-string/</guid><description> {{ ScanString Field }}
Example type Book struct { Author string CoAuthor *string Title sql.Null[string] } var queryBook = sqlt.One[int64, Book](sqlt.Parse(` SELECT author {{ ScanString &amp;#34;Author&amp;#34; }} , co_author {{ ScanString &amp;#34;CoAuthor&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ . }} `))</description></item><item><title>2. Load from file</title><link>https://wroge.github.io/sqlt-docs/tour/2_load_from_file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/2_load_from_file/</guid><description>tour/load_from_file/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL ) {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title) VALUES ({{ . }}) RETURNING id; {{ end }} {{ define &amp;#34;get_book&amp;#34; }} SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ . }}; {{ end }} tour/load_from_file/repository.go package repository import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;github.</description></item><item><title>Config</title><link>https://wroge.github.io/sqlt-docs/documentation/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/config/</guid><description> Example import &amp;#34;github.com/Masterminds/sprig/v3&amp;#34; // sqlt.Config implements sqlt.Option config := sqlt.Config{ Placeholder: sqlt.Dollar, Templates: []sqlt.Template{ sqlt.Funcs(sprig.TxtFuncMap()), }, Log: func(ctx context.Context, info sqlt.Info) { fmt.Println(info.SQL) }, } // sqlt.First(opts ...sqlt.Option) var queryBook = sqlt.First[Query, Book](config, sqlt.NoExpirationCache(100), sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>jackc/pgx</title><link>https://wroge.github.io/sqlt-docs/documentation/driver/jackc-pgx/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/driver/jackc-pgx/</guid><description>Example import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/jackc/pgx/v5/stdlib&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Dollar, sqlt.NoExpirationCache(100), sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.Open(&amp;#34;pgx&amp;#34;, &amp;#34;user=postgres password=secret host=localhost port=5432 database=pgx_test sslmode=disable&amp;#34;) if err != nil { return err } book, err := queryBook.</description></item><item><title>mattn/go-sqlite3</title><link>https://wroge.github.io/sqlt-docs/documentation/driver/mattn-go-sqlite3/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/driver/mattn-go-sqlite3/</guid><description>go-sqlite3 is cgo package. If you want to build your app using go-sqlite3, you need gcc.
Example import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/mattn/go-sqlite3&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.</description></item><item><title>modernc.org/sqlite</title><link>https://wroge.github.io/sqlt-docs/documentation/driver/modernc-sqlite/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/documentation/driver/modernc-sqlite/</guid><description>Example import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;modernc.org/sqlite&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.One[Query, Book](sqlt.UnlimitedSizeCache(time.Second), sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.Open(&amp;#34;sqlite&amp;#34;, &amp;#34;:memory:?_pragma=foreign_keys(1)&amp;#34;) if err != nil { panic(err) } book, err := queryBook.Exec(ctx, db, Query{Title: &amp;#34;Moby-Dick&amp;#34;}) if err !</description></item></channel></rss>