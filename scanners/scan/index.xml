<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scan on {{ sqlt }}</title><link>https://wroge.github.io/sqlt-docs/scanners/scan/</link><description>Recent content in Scan on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://wroge.github.io/sqlt-docs/scanners/scan/index.xml" rel="self" type="application/rss+xml"/><item><title>Scan</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan/</guid><description>{{ Scan Field }}
Example type Book struct { ID int64 Title string Author string CoAuthor *string Published *time.Time Pages sql.Null[int64] } var queryBook = sqlt.One[int64, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} , author {{ Scan &amp;#34;Author&amp;#34; }} , co_author {{ Scan &amp;#34;CoAuthor&amp;#34; }} , published {{ Scan &amp;#34;Published&amp;#34; }} , pages {{ Scan &amp;#34;Pages&amp;#34; }} FROM books WHERE id = {{ .</description></item><item><title>ScanString</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-string/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-string/</guid><description> {{ ScanString Field }}
Example type Book struct { Author string CoAuthor *string Title sql.Null[string] } var queryBook = sqlt.One[int64, Book](sqlt.Parse(` SELECT author {{ ScanString &amp;#34;Author&amp;#34; }} , co_author {{ ScanString &amp;#34;CoAuthor&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ . }} `))</description></item><item><title>1. Create Statements</title><link>https://wroge.github.io/sqlt-docs/tour/1_create_statements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/1_create_statements/</guid><description>tour/create_statements/repository.go package repository import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; _ &amp;#34;modernc.org/sqlite&amp;#34; ) type Book struct { ID int64 Title string } var ( schema = sqlt.Exec[any](sqlt.Parse(` CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL ) `)) create = sqlt.First[string, int64](sqlt.Parse(` INSERT INTO books (title) VALUES ({{ . }}) RETURNING id; `)) get = sqlt.First[int64, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ .</description></item><item><title>ScanInt</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-int/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-int/</guid><description> {{ ScanInt Field }}
Example type Book struct { ID int Pages *int64 Edition sql.Null[int64] } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , pages {{ ScanInt &amp;#34;Pages&amp;#34; }} , edition {{ Scan &amp;#34;Edition&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>ScanFloat</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-float/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-float/</guid><description> {{ ScanUint Field }}
Example type Book struct { ID uint64 Rating float64 } var queryBook = sqlt.All[any, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , rating {{ ScanFloat &amp;#34;Rating&amp;#34; }} FROM books; `))</description></item><item><title>ScanUint</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-uint/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-uint/</guid><description> {{ ScanUint Field }}
Example type Book struct { ID uint Pages *uint64 Edition sql.Null[uint64] } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanUint &amp;#34;ID&amp;#34; }} , pages {{ ScanUint &amp;#34;Pages&amp;#34; }} , edition {{ Scan &amp;#34;Edition&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>3. Bulk Insert</title><link>https://wroge.github.io/sqlt-docs/tour/3_bulk_insert/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/3_bulk_insert/</guid><description>tour/bulk_insert/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, author TEXT NOT NULL ) {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title, author) VALUES ({{ .Title }}, {{ .Author }}) RETURNING id; {{ end }} {{ define &amp;#34;insert_books&amp;#34; }} INSERT INTO books (title, author) VALUES {{ range $i, $c := . }} {{ if $i }}, {{ end }} ({{ $c.</description></item><item><title>4. Transactions</title><link>https://wroge.github.io/sqlt-docs/tour/4_transactions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/tour/4_transactions/</guid><description>tour/transactions/queries.sql {{ define &amp;#34;schema&amp;#34; }} CREATE TABLE IF NOT EXISTS books ( id INTEGER PRIMARY KEY, title TEXT NOT NULL, author_id INTEGER REFERENCES authors(id), added_at DATE NOT NULL ); CREATE TABLE IF NOT EXISTS authors ( id INTEGER PRIMARY KEY, name TEXT UNIQUE ); {{ end }} {{ define &amp;#34;upsert_author&amp;#34; }} INSERT INTO authors (name) VALUES ({{ .Author }}) ON CONFLICT (name) DO UPDATE SET id = authors.id RETURNING id; {{ end }} {{ define &amp;#34;insert_book&amp;#34; }} INSERT INTO books (title, author_id, added_at) VALUES ({{ .</description></item><item><title>ScanTime</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-time/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-time/</guid><description> {{ ScanTime Field }}
Example type Book struct { Added time.Time Updated *time.Time Published sql.Null[time.Time] } var queryBooks = sqlt.All[string, Book](sqlt.Parse(` SELECT added_at {{ ScanTime &amp;#34;Added&amp;#34; }} , updated_at {{ ScanTime &amp;#34;Updated&amp;#34; }} , published_at {{ Scan &amp;#34;Published&amp;#34; }} FROM books WHERE author = {{ . }} `))</description></item><item><title>ScanBinary</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-binary/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-binary/</guid><description> {{ ScanBinary Field }}
Example type Book struct { ID int64 AmazonLink url.URL } var queryBook = sqlt.First[string, Book](sqlt.Parse(` SELECT books.id {{ Scan &amp;#34;ID&amp;#34; }} , books.amazon_link {{ ScanBinary &amp;#34;AmazonLink&amp;#34; }} FROM books WHERE title = {{ . }} `))</description></item></channel></rss>