<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scanner on {{ sqlt }}</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/</link><description>Recent content in Scanner on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://wroge.github.io/sqlt-docs/docs/scanner/index.xml" rel="self" type="application/rss+xml"/><item><title>Scan</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan/</guid><description>{{ Scan Field }}
Example type Book struct { ID int64 Title string Author string CoAuthor *string Published *time.Time Pages sql.Null[int64] } var queryBook = sqlt.One[int64, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} , author {{ Scan &amp;#34;Author&amp;#34; }} , co_author {{ Scan &amp;#34;CoAuthor&amp;#34; }} , published {{ Scan &amp;#34;Published&amp;#34; }} , pages {{ Scan &amp;#34;Pages&amp;#34; }} FROM books WHERE id = {{ .</description></item><item><title>ScanString</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-string/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-string/</guid><description> {{ ScanString Field }}
Example type Book struct { Author string CoAuthor *string Title sql.Null[string] } var queryBook = sqlt.One[int64, Book](sqlt.Parse(` SELECT author {{ ScanString &amp;#34;Author&amp;#34; }} , co_author {{ ScanString &amp;#34;CoAuthor&amp;#34; }} , title {{ Scan &amp;#34;Title&amp;#34; }} FROM books WHERE id = {{ . }} `))</description></item><item><title>ScanInt</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-int/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-int/</guid><description> {{ ScanInt Field }}
Example type Book struct { ID int Pages *int64 Edition sql.Null[int64] } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , pages {{ ScanInt &amp;#34;Pages&amp;#34; }} , edition {{ Scan &amp;#34;Edition&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>ScanFloat</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-float/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-float/</guid><description> {{ ScanUint Field }}
Example type Book struct { ID uint64 Rating float64 } var queryBook = sqlt.All[any, Book](sqlt.Parse(` SELECT id {{ Scan &amp;#34;ID&amp;#34; }} , rating {{ ScanFloat &amp;#34;Rating&amp;#34; }} FROM books; `))</description></item><item><title>ScanUint</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-uint/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-uint/</guid><description> {{ ScanUint Field }}
Example type Book struct { ID uint Pages *uint64 Edition sql.Null[uint64] } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanUint &amp;#34;ID&amp;#34; }} , pages {{ ScanUint &amp;#34;Pages&amp;#34; }} , edition {{ Scan &amp;#34;Edition&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>ScanBool</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-bool/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-bool/</guid><description> {{ ScanBool Field }}
Example type Favorite bool type Book struct { Favorite Favorite Read bool } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT true {{ ScanBool &amp;#34;Favorite&amp;#34; }} , read {{ ScanBool &amp;#34;Read&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>ScanTime</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-time/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-time/</guid><description> {{ ScanTime Field }}
Example type Book struct { Added time.Time Updated *time.Time Published sql.Null[time.Time] } var queryBooks = sqlt.All[string, Book](sqlt.Parse(` SELECT added_at {{ ScanTime &amp;#34;Added&amp;#34; }} , updated_at {{ ScanTime &amp;#34;Updated&amp;#34; }} , published_at {{ Scan &amp;#34;Published&amp;#34; }} FROM books WHERE author = {{ . }} `))</description></item><item><title>ScanJSON</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-json/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-json/</guid><description> {{ ScanJSON Field }}
Example type Book struct { ID int64 Authors []string } var queryBook = sqlt.One[string, Book](sqlt.Parse(` SELECT books.id {{ ScanInt &amp;#34;ID&amp;#34; }} , JSON_AGG(authors.name) {{ ScanJSON &amp;#34;Authors&amp;#34; }} FROM books LEFT JOIN book_authors ON books.id = book_authors.book_id LEFT JOIN authors ON authors.id = book_authors.author_id WHERE books.title = {{ . }} `))</description></item><item><title>ScanBinary</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-binary/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-binary/</guid><description> {{ ScanBinary Field }}
Example type Book struct { ID int64 AmazonLink url.URL } var queryBook = sqlt.First[string, Book](sqlt.Parse(` SELECT books.id {{ Scan &amp;#34;ID&amp;#34; }} , books.amazon_link {{ ScanBinary &amp;#34;AmazonLink&amp;#34; }} FROM books WHERE title = {{ . }} `))</description></item><item><title>ScanText</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-text/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-text/</guid><description> {{ ScanText Field }}
Example type Book struct { ID int64 Sales big.Int } var queryBook = sqlt.First[string, Book](sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , sales {{ ScanText &amp;#34;Sales&amp;#34; }} FROM books WHERE title = {{ . }} `))</description></item><item><title>ScanStringSlice</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-string-slice/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-string-slice/</guid><description> {{ ScanStringSlice Field Sep }}
Example var queryTags = sqlt.First[any, []string](sqlt.Parse(` SELECT &amp;#39;hello,world&amp;#39;; {{ ScanStringSlice &amp;#34;&amp;#34; &amp;#34;,&amp;#34; }} `))</description></item><item><title>ScanStringTime</title><link>https://wroge.github.io/sqlt-docs/docs/scanner/scan-string-time/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/scanner/scan-string-time/</guid><description>{{ ScanStringTime Field Layout Location }}
Example var queryDate = sqlt.One[string, time.Time](sqlt.Parse(` SELECT &amp;#39;2025-04-06&amp;#39; {{ ScanStringTime &amp;#34;&amp;#34; &amp;#34;DateOnly&amp;#34; &amp;#34;UTC&amp;#34; }} FROM books WHERE title = {{ . }} `)) // Predefined layouts: var layoutMap = map[string]string{ &amp;#34;DateTime&amp;#34;: time.DateTime, &amp;#34;DateOnly&amp;#34;: time.DateOnly, &amp;#34;TimeOnly&amp;#34;: time.TimeOnly, &amp;#34;RFC3339&amp;#34;: time.RFC3339, &amp;#34;RFC3339Nano&amp;#34;: time.RFC3339Nano, &amp;#34;Layout&amp;#34;: time.Layout, &amp;#34;ANSIC&amp;#34;: time.ANSIC, &amp;#34;UnixDate&amp;#34;: time.UnixDate, &amp;#34;RubyDate&amp;#34;: time.RubyDate, &amp;#34;RFC822&amp;#34;: time.RFC822, &amp;#34;RFC822Z&amp;#34;: time.RFC822Z, &amp;#34;RFC850&amp;#34;: time.RFC850, &amp;#34;RFC1123&amp;#34;: time.RFC1123, &amp;#34;RFC1123Z&amp;#34;: time.RFC1123Z, &amp;#34;Kitchen&amp;#34;: time.Kitchen, &amp;#34;Stamp&amp;#34;: time.Stamp, &amp;#34;StampMilli&amp;#34;: time.</description></item></channel></rss>