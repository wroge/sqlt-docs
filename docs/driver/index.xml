<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Driver on {{ sqlt }}</title><link>https://wroge.github.io/sqlt-docs/docs/driver/</link><description>Recent content in Driver on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://wroge.github.io/sqlt-docs/docs/driver/index.xml" rel="self" type="application/rss+xml"/><item><title>jackc/pgx</title><link>https://wroge.github.io/sqlt-docs/docs/driver/jackc-pgx/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/driver/jackc-pgx/</guid><description>import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/jackc/pgx/v5/stdlib&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Dollar, sqlt.Parse(` SELECT id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.Open(&amp;#34;pgx&amp;#34;, &amp;#34;user=postgres password=secret host=localhost port=5432 database=pgx_test sslmode=disable&amp;#34;) if err != nil { return err } book, err := queryBook.</description></item><item><title>mattn/go-sqlite3</title><link>https://wroge.github.io/sqlt-docs/docs/driver/mattn-go-sqlite3/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/driver/mattn-go-sqlite3/</guid><description>go-sqlite3 is cgo package. If you want to build your app using go-sqlite3, you need gcc.
import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/mattn/go-sqlite3&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.</description></item><item><title>modernc.org/sqlite</title><link>https://wroge.github.io/sqlt-docs/docs/driver/modernc-sqlite/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/driver/modernc-sqlite/</guid><description>import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;modernc.org/sqlite&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Parse(` SELECT id {{ ScanInt64 &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.Open(&amp;#34;sqlite&amp;#34;, &amp;#34;test.db?_pragma=foreign_keys(1)&amp;#34;) if err != nil { panic(err) } book, err := queryBook.Exec(ctx, db, Query{Title: &amp;#34;Moby-Dick&amp;#34;}) if err !</description></item></channel></rss>