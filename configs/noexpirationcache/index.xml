<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NoExpirationCache on {{ sqlt }}</title><link>https://wroge.github.io/sqlt-docs/configs/noexpirationcache/</link><description>Recent content in NoExpirationCache on {{ sqlt }}</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 06 Apr 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://wroge.github.io/sqlt-docs/configs/noexpirationcache/index.xml" rel="self" type="application/rss+xml"/><item><title>Config</title><link>https://wroge.github.io/sqlt-docs/docs/config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/config/</guid><description> Example import &amp;#34;github.com/Masterminds/sprig/v3&amp;#34; // sqlt.Config implements sqlt.Option config := sqlt.Config{ Placeholder: sqlt.Dollar, Templates: []sqlt.Template{ sqlt.Funcs(sprig.TxtFuncMap()), }, Log: func(ctx context.Context, info sqlt.Info) { fmt.Println(info.SQL) }, } // sqlt.First(opts ...sqlt.Option) var queryBook = sqlt.First[Query, Book](config, sqlt.NoExpirationCache(100), sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `))</description></item><item><title>jackc/pgx</title><link>https://wroge.github.io/sqlt-docs/docs/driver/jackc-pgx/</link><pubDate>Sun, 06 Apr 2025 00:00:00 +0000</pubDate><guid>https://wroge.github.io/sqlt-docs/docs/driver/jackc-pgx/</guid><description>Example import ( &amp;#34;context&amp;#34; &amp;#34;database/sql&amp;#34; _ &amp;#34;github.com/jackc/pgx/v5/stdlib&amp;#34; &amp;#34;github.com/wroge/sqlt&amp;#34; ) type Book struct { ID int64 Title string } type Query struct { Title string } var queryBook = sqlt.First[Query, Book](sqlt.Dollar, sqlt.NoExpirationCache(100), sqlt.Parse(` SELECT id {{ ScanInt &amp;#34;ID&amp;#34; }} , title {{ ScanString &amp;#34;Title&amp;#34; }} FROM books WHERE title = {{ .Title }} `)) db, err := sql.Open(&amp;#34;pgx&amp;#34;, &amp;#34;user=postgres password=secret host=localhost port=5432 database=pgx_test sslmode=disable&amp;#34;) if err != nil { return err } book, err := queryBook.</description></item></channel></rss>